import type { Plugin } from "vite";
import { join, basename, extname } from "path";
import { readdir, writeFile } from "fs/promises";
import { existsSync } from "fs";

interface Options {
	/**
	 * Starting directory
	 */
	entry: string;

	/**
	 * File extension to search for
	 */
	extension: string | string[] | RegExp;

	/**
	 * Weather or not to use typescript
	 * @default true When tsconfig.json is found
	 */
	ts?: boolean;
}

export default (options: Options): Plugin => {
	const name = "vite-plugin-barrels";

	if (!options.entry) throw new Error(`${name}: missing entry!`);
	if (!options.extension) throw new Error(`${name}: missing extension!`);

	const dir = join(process.cwd(), options.entry);
	const extensions =
		options.extension instanceof Array
			? options.extension
			: [options.extension];
	const typescript =
		"ts" in options
			? options.ts
			: existsSync(join(process.cwd(), "tsconfig.json"));

	/**
	 * Creates `index.ts` file containing svelte files
	 * @param {string} dir directory to look in
	 */
	async function barrel(dir: string) {
		const entries = await readdir(dir, { withFileTypes: true });
		const directories = entries
			.filter((e) => e.isDirectory())
			.map((e) => e.name);
		const files = entries.filter((e) => e.isFile()).map((e) => e.name);
		const components = files.filter(
			(f) =>
				extensions.some((ext) => {
					if (typeof ext === 'string') {
						return f.endsWith(ext)
					}

					return ext.test(f)
				}) &&
				basename(f) !== "index.js" &&
				basename(f) !== "index.ts"
		);

		const header = "// Generated by vite-plugin-barrels\n";

		const content =
			[
				header,
				...directories.map((d) => `export * from "./${d}";`),
				...components.map(
					(c) =>
						`export { default as ${basename(c, extname(c))} } from "./${c}";`
				),
			].join("\n") + "\n";

		await writeFile(join(dir, `index.${typescript ? "ts" : "js"}`), content);

		directories.forEach((d) => barrel(join(dir, d)));
	}

	return {
		name,
		async buildStart() {
			await barrel(dir);
		},
		async handleHotUpdate({ file }) {
			if (
				extensions.some((e) => {
					if (typeof e === 'string') {
						return file.endsWith(e)
					}

					return e.test(file)
				})
			) {
				await barrel(dir)
			}
		},
	};
};
